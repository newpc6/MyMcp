{
  "name": "http_client",
  "description": "HTTP客户端工具模块",
  "module_path": "repository.http_client",
  "author": "系统",
  "version": "1.0.0",
  "tags": "HTTP,API,请求,网络",
  "icon": "globe",
  "is_hosted": true,
  "category": "网络工具",
  "config_schema": "{\n    \"timeout\": {\n        \"type\": \"integer\",\n        \"description\": \"请求超时时间(秒)\",\n        \"default\": 30\n    },\n    \"max_redirects\": {\n        \"type\": \"integer\",\n        \"description\": \"最大重定向次数\",\n        \"default\": 5\n    },\n    \"user_agent\": {\n        \"type\": \"string\",\n        \"description\": \"用户代理字符串\",\n        \"default\": \"MCP-HTTP-Client/1.0\"\n    }\n}",
  "code": "\"\"\"\nHTTP客户端工具模块，提供HTTP请求功能\n\"\"\"\nimport requests\nimport json\nfrom typing import Dict, Any, Optional\nfrom urllib.parse import urljoin, urlparse\nimport time\n\n# 配置\nconfig = {\n    \"timeout\": 30,\n    \"max_redirects\": 5,\n    \"user_agent\": \"MCP-HTTP-Client/1.0\"\n}\n\ndef _get_headers(custom_headers: Optional[Dict[str, str]] = None) -> Dict[str, str]:\n    \"\"\"获取请求头\"\"\"\n    headers = {\n        \"User-Agent\": config.get(\"user_agent\", \"MCP-HTTP-Client/1.0\"),\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Accept-Encoding\": \"gzip, deflate\"\n    }\n    \n    if custom_headers:\n        headers.update(custom_headers)\n    \n    return headers\n\ndef _validate_url(url: str) -> bool:\n    \"\"\"验证URL格式\"\"\"\n    try:\n        result = urlparse(url)\n        return all([result.scheme, result.netloc])\n    except:\n        return False\n\ndef get_request(url: str, params: Optional[Dict[str, Any]] = None, \n               headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:\n    \"\"\"\n    发送GET请求\n    \n    参数:\n        url: 请求URL\n        params: 查询参数\n        headers: 自定义请求头\n        \n    返回:\n        请求结果\n    \"\"\"\n    try:\n        if not _validate_url(url):\n            return {\"error\": \"无效的URL格式\"}\n        \n        request_headers = _get_headers(headers)\n        timeout = config.get(\"timeout\", 30)\n        \n        start_time = time.time()\n        response = requests.get(\n            url, \n            params=params, \n            headers=request_headers, \n            timeout=timeout,\n            allow_redirects=True\n        )\n        end_time = time.time()\n        \n        # 尝试解析JSON响应\n        try:\n            response_data = response.json()\n        except:\n            response_data = response.text\n        \n        return {\n            \"url\": response.url,\n            \"status_code\": response.status_code,\n            \"headers\": dict(response.headers),\n            \"data\": response_data,\n            \"response_time\": round(end_time - start_time, 3),\n            \"encoding\": response.encoding,\n            \"success\": response.status_code < 400\n        }\n    \n    except requests.exceptions.Timeout:\n        return {\"error\": \"请求超时\"}\n    except requests.exceptions.ConnectionError:\n        return {\"error\": \"连接错误\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef post_request(url: str, data: Optional[Dict[str, Any]] = None, \n                json_data: Optional[Dict[str, Any]] = None,\n                headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:\n    \"\"\"\n    发送POST请求\n    \n    参数:\n        url: 请求URL\n        data: 表单数据\n        json_data: JSON数据\n        headers: 自定义请求头\n        \n    返回:\n        请求结果\n    \"\"\"\n    try:\n        if not _validate_url(url):\n            return {\"error\": \"无效的URL格式\"}\n        \n        request_headers = _get_headers(headers)\n        timeout = config.get(\"timeout\", 30)\n        \n        # 设置Content-Type\n        if json_data:\n            request_headers[\"Content-Type\"] = \"application/json\"\n        \n        start_time = time.time()\n        response = requests.post(\n            url, \n            data=data,\n            json=json_data,\n            headers=request_headers, \n            timeout=timeout,\n            allow_redirects=True\n        )\n        end_time = time.time()\n        \n        # 尝试解析JSON响应\n        try:\n            response_data = response.json()\n        except:\n            response_data = response.text\n        \n        return {\n            \"url\": response.url,\n            \"status_code\": response.status_code,\n            \"headers\": dict(response.headers),\n            \"data\": response_data,\n            \"response_time\": round(end_time - start_time, 3),\n            \"encoding\": response.encoding,\n            \"success\": response.status_code < 400\n        }\n    \n    except requests.exceptions.Timeout:\n        return {\"error\": \"请求超时\"}\n    except requests.exceptions.ConnectionError:\n        return {\"error\": \"连接错误\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef put_request(url: str, data: Optional[Dict[str, Any]] = None, \n               json_data: Optional[Dict[str, Any]] = None,\n               headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:\n    \"\"\"\n    发送PUT请求\n    \n    参数:\n        url: 请求URL\n        data: 表单数据\n        json_data: JSON数据\n        headers: 自定义请求头\n        \n    返回:\n        请求结果\n    \"\"\"\n    try:\n        if not _validate_url(url):\n            return {\"error\": \"无效的URL格式\"}\n        \n        request_headers = _get_headers(headers)\n        timeout = config.get(\"timeout\", 30)\n        \n        if json_data:\n            request_headers[\"Content-Type\"] = \"application/json\"\n        \n        start_time = time.time()\n        response = requests.put(\n            url, \n            data=data,\n            json=json_data,\n            headers=request_headers, \n            timeout=timeout,\n            allow_redirects=True\n        )\n        end_time = time.time()\n        \n        try:\n            response_data = response.json()\n        except:\n            response_data = response.text\n        \n        return {\n            \"url\": response.url,\n            \"status_code\": response.status_code,\n            \"headers\": dict(response.headers),\n            \"data\": response_data,\n            \"response_time\": round(end_time - start_time, 3),\n            \"encoding\": response.encoding,\n            \"success\": response.status_code < 400\n        }\n    \n    except requests.exceptions.Timeout:\n        return {\"error\": \"请求超时\"}\n    except requests.exceptions.ConnectionError:\n        return {\"error\": \"连接错误\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef delete_request(url: str, headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:\n    \"\"\"\n    发送DELETE请求\n    \n    参数:\n        url: 请求URL\n        headers: 自定义请求头\n        \n    返回:\n        请求结果\n    \"\"\"\n    try:\n        if not _validate_url(url):\n            return {\"error\": \"无效的URL格式\"}\n        \n        request_headers = _get_headers(headers)\n        timeout = config.get(\"timeout\", 30)\n        \n        start_time = time.time()\n        response = requests.delete(\n            url, \n            headers=request_headers, \n            timeout=timeout,\n            allow_redirects=True\n        )\n        end_time = time.time()\n        \n        try:\n            response_data = response.json()\n        except:\n            response_data = response.text\n        \n        return {\n            \"url\": response.url,\n            \"status_code\": response.status_code,\n            \"headers\": dict(response.headers),\n            \"data\": response_data,\n            \"response_time\": round(end_time - start_time, 3),\n            \"encoding\": response.encoding,\n            \"success\": response.status_code < 400\n        }\n    \n    except requests.exceptions.Timeout:\n        return {\"error\": \"请求超时\"}\n    except requests.exceptions.ConnectionError:\n        return {\"error\": \"连接错误\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef check_url_status(url: str) -> Dict[str, Any]:\n    \"\"\"\n    检查URL状态\n    \n    参数:\n        url: 要检查的URL\n        \n    返回:\n        URL状态信息\n    \"\"\"\n    try:\n        if not _validate_url(url):\n            return {\"error\": \"无效的URL格式\"}\n        \n        start_time = time.time()\n        response = requests.head(url, timeout=config.get(\"timeout\", 30))\n        end_time = time.time()\n        \n        return {\n            \"url\": url,\n            \"status_code\": response.status_code,\n            \"response_time\": round(end_time - start_time, 3),\n            \"headers\": dict(response.headers),\n            \"accessible\": response.status_code < 400,\n            \"redirect_url\": response.url if response.url != url else None\n        }\n    \n    except requests.exceptions.Timeout:\n        return {\"error\": \"请求超时\", \"accessible\": False}\n    except requests.exceptions.ConnectionError:\n        return {\"error\": \"连接错误\", \"accessible\": False}\n    except Exception as e:\n        return {\"error\": str(e), \"accessible\": False}\n\ndef download_file(url: str, save_path: Optional[str] = None) -> Dict[str, Any]:\n    \"\"\"\n    下载文件\n    \n    参数:\n        url: 文件URL\n        save_path: 保存路径（可选）\n        \n    返回:\n        下载结果\n    \"\"\"\n    try:\n        if not _validate_url(url):\n            return {\"error\": \"无效的URL格式\"}\n        \n        response = requests.get(url, stream=True, timeout=config.get(\"timeout\", 30))\n        \n        if response.status_code >= 400:\n            return {\"error\": f\"下载失败，状态码: {response.status_code}\"}\n        \n        # 获取文件大小\n        file_size = response.headers.get('content-length')\n        if file_size:\n            file_size = int(file_size)\n        \n        # 获取文件名\n        filename = save_path\n        if not filename:\n            filename = url.split('/')[-1] or 'downloaded_file'\n        \n        # 如果没有保存路径，只返回文件信息\n        if not save_path:\n            return {\n                \"url\": url,\n                \"filename\": filename,\n                \"file_size\": file_size,\n                \"content_type\": response.headers.get('content-type'),\n                \"downloadable\": True,\n                \"note\": \"文件可下载，但未指定保存路径\"\n            }\n        \n        # 下载文件\n        with open(save_path, 'wb') as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                f.write(chunk)\n        \n        return {\n            \"url\": url,\n            \"save_path\": save_path,\n            \"file_size\": file_size,\n            \"content_type\": response.headers.get('content-type'),\n            \"success\": True\n        }\n    \n    except Exception as e:\n        return {\"error\": str(e)}",
  "markdown_docs": "# HTTP客户端工具\n\n## 简介\nHTTP客户端工具模块提供完整的HTTP请求功能，支持GET、POST、PUT、DELETE等方法，适用于API调用和网络资源访问。\n\n## 配置项\n该模块支持以下配置：\n\n| 配置项 | 类型 | 描述 | 默认值 |\n|-------|-----|------|-------|\n| timeout | 整数 | 请求超时时间(秒) | 30 |\n| max_redirects | 整数 | 最大重定向次数 | 5 |\n| user_agent | 字符串 | 用户代理字符串 | MCP-HTTP-Client/1.0 |\n\n## 功能列表\n\n### 1. GET请求\n发送HTTP GET请求获取资源。\n\n**参数：**\n- url: 请求URL\n- params: 查询参数（可选）\n- headers: 自定义请求头（可选）\n\n**返回：**\n- 包含状态码、响应头、数据和响应时间的完整响应信息\n\n### 2. POST请求\n发送HTTP POST请求提交数据。\n\n**参数：**\n- url: 请求URL\n- data: 表单数据（可选）\n- json_data: JSON数据（可选）\n- headers: 自定义请求头（可选）\n\n**返回：**\n- 完整的响应信息\n\n### 3. PUT请求\n发送HTTP PUT请求更新资源。\n\n**参数：**\n- url: 请求URL\n- data: 表单数据（可选）\n- json_data: JSON数据（可选）\n- headers: 自定义请求头（可选）\n\n**返回：**\n- 完整的响应信息\n\n### 4. DELETE请求\n发送HTTP DELETE请求删除资源。\n\n**参数：**\n- url: 请求URL\n- headers: 自定义请求头（可选）\n\n**返回：**\n- 完整的响应信息\n\n### 5. 检查URL状态\n快速检查URL的可访问性和状态。\n\n**参数：**\n- url: 要检查的URL\n\n**返回：**\n- URL状态信息，包括状态码、响应时间和可访问性\n\n### 6. 下载文件\n从URL下载文件到本地。\n\n**参数：**\n- url: 文件URL\n- save_path: 保存路径（可选）\n\n**返回：**\n- 下载结果和文件信息\n\n## 使用示例\n```python\n# GET请求\nresponse = get_request(\"https://api.example.com/users\", \n                     params={\"page\": 1, \"limit\": 10})\n\n# POST请求（JSON数据）\nresponse = post_request(\"https://api.example.com/users\", \n                       json_data={\"name\": \"张三\", \"email\": \"zhang@example.com\"})\n\n# 检查URL状态\nstatus = check_url_status(\"https://example.com\")\n\n# 下载文件\nresult = download_file(\"https://example.com/file.pdf\", \"./downloads/file.pdf\")\n```\n\n## 特性\n1. 支持所有常用HTTP方法\n2. 自动处理JSON响应\n3. 详细的错误处理和超时控制\n4. 响应时间统计\n5. 自定义请求头支持\n6. 文件下载功能\n7. URL验证和状态检查"
}