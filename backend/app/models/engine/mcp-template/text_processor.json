{
  "name": "text_processor",
  "description": "文本处理工具模块",
  "module_path": "repository.text_processor",
  "author": "系统",
  "version": "1.0.0",
  "tags": "文本,处理,分析,格式化",
  "icon": "text",
  "is_hosted": true,
  "category": "开发者工具",
  "config_schema": null,
  "code": "\"\"\"\n文本处理工具模块，提供各种文本处理和分析功能\n\"\"\"\nimport re\nimport json\nfrom typing import List, Dict, Any, Optional\nfrom collections import Counter\nimport hashlib\nimport base64\n\ndef count_words(text: str) -> Dict[str, Any]:\n    \"\"\"\n    统计文本中的单词数量\n    \n    参数:\n        text: 要分析的文本\n        \n    返回:\n        单词统计信息\n    \"\"\"\n    if not text:\n        return {\"error\": \"文本不能为空\"}\n    \n    # 分割单词（支持中英文）\n    words = re.findall(r'\\b\\w+\\b|[\\u4e00-\\u9fff]', text.lower())\n    word_count = len(words)\n    unique_words = len(set(words))\n    \n    # 统计最常见的单词\n    word_freq = Counter(words)\n    most_common = word_freq.most_common(10)\n    \n    return {\n        \"total_words\": word_count,\n        \"unique_words\": unique_words,\n        \"characters\": len(text),\n        \"characters_no_spaces\": len(text.replace(\" \", \"\")),\n        \"lines\": len(text.splitlines()),\n        \"paragraphs\": len([p for p in text.split(\"\\n\\n\") if p.strip()]),\n        \"most_common_words\": most_common\n    }\n\ndef extract_emails(text: str) -> List[str]:\n    \"\"\"\n    从文本中提取邮箱地址\n    \n    参数:\n        text: 要搜索的文本\n        \n    返回:\n        邮箱地址列表\n    \"\"\"\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    emails = re.findall(email_pattern, text)\n    return list(set(emails))  # 去重\n\ndef extract_urls(text: str) -> List[str]:\n    \"\"\"\n    从文本中提取URL链接\n    \n    参数:\n        text: 要搜索的文本\n        \n    返回:\n        URL列表\n    \"\"\"\n    url_pattern = r'https?://(?:[-\\w.])+(?:[:\\d]+)?(?:/(?:[\\w/_.])*(?:\\?(?:[\\w&=%.])*)?(?:#(?:[\\w.])*)?)?'\n    urls = re.findall(url_pattern, text)\n    return list(set(urls))  # 去重\n\ndef extract_phone_numbers(text: str) -> List[str]:\n    \"\"\"\n    从文本中提取电话号码\n    \n    参数:\n        text: 要搜索的文本\n        \n    返回:\n        电话号码列表\n    \"\"\"\n    # 匹配多种电话号码格式\n    phone_patterns = [\n        r'\\b\\d{3}-\\d{3}-\\d{4}\\b',  # 123-456-7890\n        r'\\b\\d{3}\\.\\d{3}\\.\\d{4}\\b',  # 123.456.7890\n        r'\\b\\(\\d{3}\\)\\s*\\d{3}-\\d{4}\\b',  # (123) 456-7890\n        r'\\b\\d{11}\\b',  # 中国手机号\n        r'\\b1[3-9]\\d{9}\\b'  # 中国手机号格式\n    ]\n    \n    phones = []\n    for pattern in phone_patterns:\n        phones.extend(re.findall(pattern, text))\n    \n    return list(set(phones))  # 去重\n\ndef format_text(text: str, operation: str) -> str:\n    \"\"\"\n    格式化文本\n    \n    参数:\n        text: 要格式化的文本\n        operation: 操作类型 (upper, lower, title, capitalize, strip)\n        \n    返回:\n        格式化后的文本\n    \"\"\"\n    operations = {\n        \"upper\": lambda t: t.upper(),\n        \"lower\": lambda t: t.lower(),\n        \"title\": lambda t: t.title(),\n        \"capitalize\": lambda t: t.capitalize(),\n        \"strip\": lambda t: t.strip(),\n        \"remove_extra_spaces\": lambda t: re.sub(r'\\s+', ' ', t).strip()\n    }\n    \n    if operation not in operations:\n        return f\"不支持的操作: {operation}。支持的操作: {', '.join(operations.keys())}\"\n    \n    return operations[operation](text)\n\ndef replace_text(text: str, pattern: str, replacement: str, use_regex: bool = False) -> Dict[str, Any]:\n    \"\"\"\n    替换文本中的内容\n    \n    参数:\n        text: 原始文本\n        pattern: 要替换的模式\n        replacement: 替换内容\n        use_regex: 是否使用正则表达式\n        \n    返回:\n        替换结果和统计信息\n    \"\"\"\n    try:\n        if use_regex:\n            new_text = re.sub(pattern, replacement, text)\n            count = len(re.findall(pattern, text))\n        else:\n            new_text = text.replace(pattern, replacement)\n            count = text.count(pattern)\n        \n        return {\n            \"original_text\": text,\n            \"new_text\": new_text,\n            \"pattern\": pattern,\n            \"replacement\": replacement,\n            \"replacements_made\": count,\n            \"use_regex\": use_regex\n        }\n    except re.error as e:\n        return {\"error\": f\"正则表达式错误: {str(e)}\"}\n\ndef split_text(text: str, delimiter: str = \"\\n\", max_parts: int = 100) -> List[str]:\n    \"\"\"\n    分割文本\n    \n    参数:\n        text: 要分割的文本\n        delimiter: 分隔符，默认为换行符\n        max_parts: 最大分割部分数量\n        \n    返回:\n        分割后的文本列表\n    \"\"\"\n    if delimiter == \"\\\\n\":\n        delimiter = \"\\n\"\n    elif delimiter == \"\\\\t\":\n        delimiter = \"\\t\"\n    \n    parts = text.split(delimiter)\n    \n    # 限制返回的部分数量\n    if len(parts) > max_parts:\n        parts = parts[:max_parts]\n    \n    return [part for part in parts if part.strip()]  # 过滤空行\n\ndef generate_hash(text: str, algorithm: str = \"md5\") -> Dict[str, str]:\n    \"\"\"\n    生成文本的哈希值\n    \n    参数:\n        text: 要计算哈希的文本\n        algorithm: 哈希算法 (md5, sha1, sha256)\n        \n    返回:\n        哈希值信息\n    \"\"\"\n    algorithms = {\n        \"md5\": hashlib.md5,\n        \"sha1\": hashlib.sha1,\n        \"sha256\": hashlib.sha256\n    }\n    \n    if algorithm not in algorithms:\n        return {\"error\": f\"不支持的算法: {algorithm}。支持的算法: {', '.join(algorithms.keys())}\"}\n    \n    hash_obj = algorithms[algorithm]()\n    hash_obj.update(text.encode('utf-8'))\n    \n    return {\n        \"text\": text,\n        \"algorithm\": algorithm,\n        \"hash\": hash_obj.hexdigest(),\n        \"length\": len(text)\n    }\n\ndef encode_decode_text(text: str, operation: str, encoding: str = \"base64\") -> Dict[str, Any]:\n    \"\"\"\n    编码或解码文本\n    \n    参数:\n        text: 要处理的文本\n        operation: 操作类型 (encode, decode)\n        encoding: 编码类型 (base64, url)\n        \n    返回:\n        编码/解码结果\n    \"\"\"\n    try:\n        if encoding == \"base64\":\n            if operation == \"encode\":\n                result = base64.b64encode(text.encode('utf-8')).decode('utf-8')\n            elif operation == \"decode\":\n                result = base64.b64decode(text.encode('utf-8')).decode('utf-8')\n            else:\n                return {\"error\": \"操作必须是 'encode' 或 'decode'\"}\n        else:\n            return {\"error\": f\"不支持的编码类型: {encoding}\"}\n        \n        return {\n            \"original\": text,\n            \"result\": result,\n            \"operation\": operation,\n            \"encoding\": encoding\n        }\n    except Exception as e:\n        return {\"error\": str(e)}",
  "markdown_docs": "# 文本处理工具\n\n## 简介\n文本处理工具模块提供丰富的文本分析、处理和格式化功能，适用于各种文本处理场景。\n\n## 功能列表\n\n### 1. 单词统计\n统计文本中的单词数量、字符数、行数等信息。\n\n**参数：**\n- text: 要分析的文本\n\n**返回：**\n- 包含总单词数、唯一单词数、字符数、行数、段落数和最常见单词的统计信息\n\n### 2. 提取邮箱地址\n从文本中提取所有邮箱地址。\n\n**参数：**\n- text: 要搜索的文本\n\n**返回：**\n- 邮箱地址列表（已去重）\n\n### 3. 提取URL链接\n从文本中提取所有HTTP/HTTPS链接。\n\n**参数：**\n- text: 要搜索的文本\n\n**返回：**\n- URL列表（已去重）\n\n### 4. 提取电话号码\n从文本中提取各种格式的电话号码。\n\n**参数：**\n- text: 要搜索的文本\n\n**返回：**\n- 电话号码列表（已去重）\n\n### 5. 格式化文本\n对文本进行各种格式化操作。\n\n**参数：**\n- text: 要格式化的文本\n- operation: 操作类型（upper, lower, title, capitalize, strip, remove_extra_spaces）\n\n**返回：**\n- 格式化后的文本\n\n### 6. 替换文本\n替换文本中的指定内容，支持正则表达式。\n\n**参数：**\n- text: 原始文本\n- pattern: 要替换的模式\n- replacement: 替换内容\n- use_regex: 是否使用正则表达式\n\n**返回：**\n- 替换结果和统计信息\n\n### 7. 分割文本\n按指定分隔符分割文本。\n\n**参数：**\n- text: 要分割的文本\n- delimiter: 分隔符，默认为换行符\n- max_parts: 最大分割部分数量\n\n**返回：**\n- 分割后的文本列表\n\n### 8. 生成哈希值\n计算文本的哈希值。\n\n**参数：**\n- text: 要计算哈希的文本\n- algorithm: 哈希算法（md5, sha1, sha256）\n\n**返回：**\n- 哈希值信息\n\n### 9. 编码/解码文本\n对文本进行编码或解码操作。\n\n**参数：**\n- text: 要处理的文本\n- operation: 操作类型（encode, decode）\n- encoding: 编码类型（base64）\n\n**返回：**\n- 编码/解码结果\n\n## 使用示例\n```python\n# 统计单词\nstats = count_words(\"Hello world! This is a test.\")\n\n# 提取邮箱\nemails = extract_emails(\"联系我们：support@example.com 或 admin@test.org\")\n\n# 格式化文本\nformatted = format_text(\"hello world\", \"title\")  # 返回 \"Hello World\"\n\n# 替换文本\nresult = replace_text(\"Hello World\", \"World\", \"Python\")\n\n# 生成哈希\nhash_info = generate_hash(\"Hello World\", \"sha256\")\n```\n\n## 特性\n1. 支持中英文文本处理\n2. 提供多种文本提取功能\n3. 支持正则表达式操作\n4. 包含常用的编码解码功能\n5. 提供详细的统计信息"
}