{
  "name": "file_manager",
  "description": "文件管理工具模块",
  "module_path": "repository.file_manager",
  "author": "系统",
  "version": "1.0.0",
  "tags": "文件,管理,读写,目录",
  "icon": "folder",
  "is_hosted": true,
  "category": "开发者工具",
  "config_schema": "{\n    \"base_path\": {\n        \"type\": \"string\",\n        \"description\": \"基础路径，限制文件操作范围\",\n        \"default\": \"./\"\n    },\n    \"max_file_size\": {\n        \"type\": \"integer\",\n        \"description\": \"最大文件大小(MB)\",\n        \"default\": 10\n    }\n}",
  "code": "\"\"\"\n文件管理工具模块，提供文件和目录操作功能\n\"\"\"\nimport os\nimport json\nfrom pathlib import Path\nfrom typing import List, Dict, Any, Optional\n\n# 配置\nconfig = {\n    \"base_path\": \"./\",\n    \"max_file_size\": 10  # MB\n}\n\ndef _get_safe_path(file_path: str) -> Path:\n    \"\"\"获取安全的文件路径，确保在基础路径内\"\"\"\n    base = Path(config.get(\"base_path\", \"./\")).resolve()\n    target = (base / file_path).resolve()\n    \n    # 确保目标路径在基础路径内\n    if not str(target).startswith(str(base)):\n        raise ValueError(f\"路径 {file_path} 超出允许范围\")\n    \n    return target\n\ndef list_directory(directory_path: str = \".\") -> Dict[str, Any]:\n    \"\"\"\n    列出目录内容\n    \n    参数:\n        directory_path: 目录路径，默认为当前目录\n        \n    返回:\n        目录内容信息\n    \"\"\"\n    try:\n        safe_path = _get_safe_path(directory_path)\n        \n        if not safe_path.exists():\n            return {\"error\": f\"目录 {directory_path} 不存在\"}\n        \n        if not safe_path.is_dir():\n            return {\"error\": f\"{directory_path} 不是目录\"}\n        \n        items = []\n        for item in safe_path.iterdir():\n            item_info = {\n                \"name\": item.name,\n                \"type\": \"directory\" if item.is_dir() else \"file\",\n                \"size\": item.stat().st_size if item.is_file() else None,\n                \"modified\": item.stat().st_mtime\n            }\n            items.append(item_info)\n        \n        return {\n            \"path\": directory_path,\n            \"items\": sorted(items, key=lambda x: (x[\"type\"], x[\"name\"])),\n            \"total_items\": len(items)\n        }\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef read_file(file_path: str, encoding: str = \"utf-8\") -> Dict[str, Any]:\n    \"\"\"\n    读取文件内容\n    \n    参数:\n        file_path: 文件路径\n        encoding: 文件编码，默认为utf-8\n        \n    返回:\n        文件内容和元信息\n    \"\"\"\n    try:\n        safe_path = _get_safe_path(file_path)\n        \n        if not safe_path.exists():\n            return {\"error\": f\"文件 {file_path} 不存在\"}\n        \n        if not safe_path.is_file():\n            return {\"error\": f\"{file_path} 不是文件\"}\n        \n        # 检查文件大小\n        file_size_mb = safe_path.stat().st_size / (1024 * 1024)\n        max_size = config.get(\"max_file_size\", 10)\n        \n        if file_size_mb > max_size:\n            return {\"error\": f\"文件大小 {file_size_mb:.2f}MB 超过限制 {max_size}MB\"}\n        \n        with open(safe_path, 'r', encoding=encoding) as f:\n            content = f.read()\n        \n        return {\n            \"path\": file_path,\n            \"content\": content,\n            \"size\": safe_path.stat().st_size,\n            \"encoding\": encoding,\n            \"lines\": len(content.splitlines())\n        }\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef write_file(file_path: str, content: str, encoding: str = \"utf-8\") -> Dict[str, Any]:\n    \"\"\"\n    写入文件内容\n    \n    参数:\n        file_path: 文件路径\n        content: 文件内容\n        encoding: 文件编码，默认为utf-8\n        \n    返回:\n        操作结果\n    \"\"\"\n    try:\n        safe_path = _get_safe_path(file_path)\n        \n        # 确保父目录存在\n        safe_path.parent.mkdir(parents=True, exist_ok=True)\n        \n        with open(safe_path, 'w', encoding=encoding) as f:\n            f.write(content)\n        \n        return {\n            \"path\": file_path,\n            \"size\": len(content.encode(encoding)),\n            \"encoding\": encoding,\n            \"success\": True\n        }\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef create_directory(directory_path: str) -> Dict[str, Any]:\n    \"\"\"\n    创建目录\n    \n    参数:\n        directory_path: 目录路径\n        \n    返回:\n        操作结果\n    \"\"\"\n    try:\n        safe_path = _get_safe_path(directory_path)\n        \n        if safe_path.exists():\n            return {\"error\": f\"路径 {directory_path} 已存在\"}\n        \n        safe_path.mkdir(parents=True, exist_ok=True)\n        \n        return {\n            \"path\": directory_path,\n            \"success\": True\n        }\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef delete_file_or_directory(path: str) -> Dict[str, Any]:\n    \"\"\"\n    删除文件或目录\n    \n    参数:\n        path: 文件或目录路径\n        \n    返回:\n        操作结果\n    \"\"\"\n    try:\n        safe_path = _get_safe_path(path)\n        \n        if not safe_path.exists():\n            return {\"error\": f\"路径 {path} 不存在\"}\n        \n        if safe_path.is_file():\n            safe_path.unlink()\n            return {\"path\": path, \"type\": \"file\", \"success\": True}\n        elif safe_path.is_dir():\n            # 只删除空目录\n            if any(safe_path.iterdir()):\n                return {\"error\": f\"目录 {path} 不为空，无法删除\"}\n            safe_path.rmdir()\n            return {\"path\": path, \"type\": \"directory\", \"success\": True}\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef search_files(pattern: str, directory: str = \".\", max_results: int = 50) -> Dict[str, Any]:\n    \"\"\"\n    搜索文件\n    \n    参数:\n        pattern: 搜索模式（文件名包含的字符串）\n        directory: 搜索目录，默认为当前目录\n        max_results: 最大结果数量\n        \n    返回:\n        搜索结果\n    \"\"\"\n    try:\n        safe_path = _get_safe_path(directory)\n        \n        if not safe_path.exists() or not safe_path.is_dir():\n            return {\"error\": f\"目录 {directory} 不存在或不是目录\"}\n        \n        results = []\n        count = 0\n        \n        for item in safe_path.rglob(\"*\"):\n            if count >= max_results:\n                break\n            \n            if pattern.lower() in item.name.lower():\n                relative_path = item.relative_to(safe_path)\n                results.append({\n                    \"path\": str(relative_path),\n                    \"name\": item.name,\n                    \"type\": \"directory\" if item.is_dir() else \"file\",\n                    \"size\": item.stat().st_size if item.is_file() else None\n                })\n                count += 1\n        \n        return {\n            \"pattern\": pattern,\n            \"directory\": directory,\n            \"results\": results,\n            \"total_found\": len(results),\n            \"truncated\": count >= max_results\n        }\n    \n    except Exception as e:\n        return {\"error\": str(e)}",
  "markdown_docs": "# 文件管理工具\n\n## 简介\n文件管理工具模块提供安全的文件和目录操作功能，包括读写文件、创建删除目录、搜索文件等。\n\n## 配置项\n该模块支持以下配置：\n\n| 配置项 | 类型 | 描述 | 默认值 |\n|-------|-----|------|-------|\n| base_path | 字符串 | 基础路径，限制文件操作范围 | ./ |\n| max_file_size | 整数 | 最大文件大小(MB) | 10 |\n\n## 功能列表\n\n### 1. 列出目录内容\n列出指定目录下的所有文件和子目录。\n\n**参数：**\n- directory_path: 目录路径，默认为当前目录\n\n**返回：**\n- 目录内容列表，包含文件名、类型、大小等信息\n\n### 2. 读取文件\n读取指定文件的内容。\n\n**参数：**\n- file_path: 文件路径\n- encoding: 文件编码，默认为utf-8\n\n**返回：**\n- 文件内容和元信息\n\n### 3. 写入文件\n将内容写入到指定文件。\n\n**参数：**\n- file_path: 文件路径\n- content: 文件内容\n- encoding: 文件编码，默认为utf-8\n\n**返回：**\n- 操作结果\n\n### 4. 创建目录\n创建新目录。\n\n**参数：**\n- directory_path: 目录路径\n\n**返回：**\n- 操作结果\n\n### 5. 删除文件或目录\n删除指定的文件或空目录。\n\n**参数：**\n- path: 文件或目录路径\n\n**返回：**\n- 操作结果\n\n### 6. 搜索文件\n在指定目录中搜索包含特定模式的文件。\n\n**参数：**\n- pattern: 搜索模式\n- directory: 搜索目录，默认为当前目录\n- max_results: 最大结果数量，默认为50\n\n**返回：**\n- 搜索结果列表\n\n## 使用示例\n```python\n# 列出当前目录内容\ncontents = list_directory(\".\")\n\n# 读取文件\nfile_content = read_file(\"example.txt\")\n\n# 写入文件\nwrite_result = write_file(\"output.txt\", \"Hello, World!\")\n\n# 创建目录\ncreate_result = create_directory(\"new_folder\")\n\n# 搜索文件\nsearch_results = search_files(\"*.py\", \"src\")\n```\n\n## 安全特性\n1. 所有文件操作都限制在配置的基础路径内\n2. 文件大小限制，防止读取过大文件\n3. 只能删除空目录，防止误删除\n4. 路径验证，防止目录遍历攻击"
}