{
  "name": "数据库助手",
  "description": "数据库操作工具模块",
  "module_path": "repository.db_utils",
  "author": "系统",
  "version": "1.0.0",
  "tags": "数据库,MySQL,查询,SQL",
  "icon": "database",
  "is_hosted": true,
  "category": "数据库工具",
  "config_schema": "{\n    \"database_host\": {\n        \"type\": \"string\",\n        \"description\": \"数据库主机地址\",\n        \"required\": true\n    },\n    \"database_port\": {\n        \"type\": \"integer\",\n        \"description\": \"数据库端口\",\n        \"default\": 3306\n    },\n    \"database_user\": {\n        \"type\": \"string\",\n        \"description\": \"数据库用户名\",\n        \"required\": true\n    },\n    \"database_password\": {\n        \"type\": \"string\",\n        \"description\": \"数据库密码\",\n        \"required\": true\n    },\n    \"database_name\": {\n        \"type\": \"string\",\n        \"description\": \"数据库名称\",\n        \"required\": true\n    }\n}",
  "code": "\"\"\"\n数据库工具助手，提供数据库操作功能\n\"\"\"\nfrom decimal import Decimal\nimport pymysql\nimport json\nfrom datetime import datetime\n\n\ndef _connect_database():\n    \"\"\"\n    连接到数据库\n\n    平台配置参数 (使用${参数名}格式):\n    host: 数据库主机地址\n    port: 数据库端口\n    user: 数据库用户名\n    password: 数据库密码\n    database: 数据库名称\n\n    返回:\n    connection: 数据库连接对象\n    \"\"\"\n    try:\n        connection = pymysql.connect(\n            host=${database_host},\n            port=${database_port},\n            user=${database_user},\n            password=${database_password},\n            database=${database_name},\n            charset='utf8mb4',\n            cursorclass=pymysql.cursors.DictCursor\n        )\n        return connection\n    except Exception as e:\n        raise Exception(f\"数据库连接失败: {str(e)}\")\n\n\ndef _type_to_str(type):\n    \"\"\"将不同类型转换为字符串格式\"\"\"\n    if isinstance(type, datetime):\n        return type.strftime('%Y-%m-%d %H:%M:%S')\n    elif isinstance(type, Decimal):\n        return str(type)\n    else:\n        return type\n\n\ndef get_all_tables():\n    \"\"\"\n    获取数据库中所有表的列表\n\n    返回:\n    数据库中所有表名的JSON字符串\n    \"\"\"\n    try:\n        connection = _connect_database()\n        with connection.cursor() as cursor:\n            # 查询所有表信息\n            sql = \"\"\"\n            SELECT \n                table_name as name,\n                table_comment as comment,\n                create_time,\n                update_time\n            FROM information_schema.tables\n            WHERE table_schema = DATABASE()\n            ORDER BY table_name\n            \"\"\"\n\n            cursor.execute(sql)\n            results = cursor.fetchall()\n\n            # 处理类型转换\n            for item in results:\n                for key, value in item.items():\n                    item[key] = _type_to_str(value)\n\n            return json.dumps(results, ensure_ascii=False)\n    except Exception as e:\n        return json.dumps({\"error\": str(e)}, ensure_ascii=False)\n    finally:\n        if 'connection' in locals() and connection:\n            connection.close()\n\n\ndef get_table_columns(table_name):\n    \"\"\"\n    获取指定表的所有字段信息\n    \n    工具参数:\n    table_name (str): 表名\n    \n    返回:\n    表字段信息的JSON字符串\n    \"\"\"\n    try:\n        connection = _connect_database()\n        with connection.cursor() as cursor:\n            # 验证表名\n            if not table_name:\n                return json.dumps({\"error\": \"表名不能为空\"}, ensure_ascii=False)\n            \n            # 查询表字段信息\n            sql = \"\"\"\n            SELECT\n                column_name as name,\n                column_type as type,\n                column_comment as comment,\n                is_nullable as nullable,\n                column_key as 'key',\n                column_default as 'default',\n                extra\n            FROM information_schema.columns\n            WHERE table_schema = DATABASE()\n            AND table_name = %s\n            ORDER BY ordinal_position\n            \"\"\"\n            \n            cursor.execute(sql, (table_name,))\n            results = cursor.fetchall()\n            \n            return json.dumps(results, ensure_ascii=False)\n    except Exception as e:\n        return json.dumps({\"error\": str(e)}, ensure_ascii=False)\n    finally:\n        if 'connection' in locals() and connection:\n            connection.close()\n\n\ndef execute_raw_query(sql, limit=100):\n    \"\"\"\n    执行自定义SQL查询\n\n    工具参数:\n    sql (str): SQL查询语句\n    limit (int): 返回结果数量限制，默认为100\n\n    返回:\n    查询结果的JSON字符串\n    \"\"\"\n    try:\n        connection = _connect_database()\n        with connection.cursor() as cursor:\n            # 限制查询类型，只允许SELECT查询\n            sql_lower = sql.lower().strip()\n            if not sql_lower.startswith('select'):\n                return json.dumps(\n                    {\"error\": \"只允许执行SELECT查询\"},\n                    ensure_ascii=False\n                )\n\n            # 添加限制条件\n            if 'limit' not in sql_lower:\n                sql = f\"{sql} LIMIT {limit}\"\n\n            cursor.execute(sql)\n            results = cursor.fetchall()\n\n            # 处理类型转换\n            for item in results:\n                for key, value in item.items():\n                    item[key] = _type_to_str(value)\n\n            return json.dumps(results, ensure_ascii=False)\n    except Exception as e:\n        return json.dumps({\"error\": str(e)}, ensure_ascii=False)\n    finally:\n        if 'connection' in locals() and connection:\n            connection.close()\n\n\ndef get_table_data(table_name, columns=None, where=None, order_by=None, limit=100):\n    \"\"\"\n    获取表数据\n\n    工具参数:\n    table_name (str): 表名\n    columns (str): 要查询的列，多个列用逗号分隔，默认为*\n    where (str): WHERE条件语句，不包含WHERE关键字\n    order_by (str): ORDER BY语句，不包含ORDER BY关键字\n    limit (int): 返回结果数量限制，默认为100\n\n    返回:\n    表数据的JSON字符串\n    \"\"\"\n    try:\n        connection = _connect_database()\n        with connection.cursor() as cursor:\n            # 验证表名\n            if not table_name:\n                return json.dumps({\"error\": \"表名不能为空\"}, ensure_ascii=False)\n\n            # 构建查询语句\n            select_cols = \"*\" if not columns else columns\n            sql = f\"SELECT {select_cols} FROM `{table_name}`\"\n\n            if where:\n                sql += f\" WHERE {where}\"\n\n            if order_by:\n                sql += f\" ORDER BY {order_by}\"\n\n            sql += f\" LIMIT {limit}\"\n\n            cursor.execute(sql)\n            results = cursor.fetchall()\n\n            # 处理类型转换\n            for item in results:\n                for key, value in item.items():\n                    item[key] = _type_to_str(value)\n\n            return json.dumps(results, ensure_ascii=False)\n    except Exception as e:\n        return json.dumps({\"error\": str(e)}, ensure_ascii=False)\n    finally:\n        if 'connection' in locals() and connection:\n            connection.close()",
  "markdown_docs": "# 数据库工具助手\n\n## 简介\n数据库工具助手提供MySQL数据库操作功能，包括查询表结构、获取表数据和执行自定义SQL查询等功能。\n\n## 配置项\n该模块需要以下配置：\n\n| 配置项 | 类型 | 描述 | 默认值 |\n|-------|-----|------|-------|\n| database_host | 字符串 | 数据库主机地址 | 必填 |\n| database_port | 整数 | 数据库端口 | 3306 |\n| database_user | 字符串 | 数据库用户名 | 必填 |\n| database_password | 字符串 | 数据库密码 | 必填 |\n| database_name | 字符串 | 数据库名称 | 必填 |\n\n## 功能列表\n\n### 1. 获取所有表\n获取数据库中所有表的列表及其基本信息。\n\n**返回：**\n- 包含表名、注释、创建时间和更新时间的JSON字符串\n\n### 2. 获取表字段\n获取指定表的所有字段信息。\n\n**参数：**\n- table_name: 表名\n\n**返回：**\n- 包含字段名、类型、注释等信息的JSON字符串\n\n### 3. 执行自定义SQL查询\n执行用户提供的SQL查询语句。\n\n**参数：**\n- sql: SQL查询语句\n- limit: 返回结果数量限制，默认为100\n\n**返回：**\n- 查询结果的JSON字符串\n\n### 4. 获取表数据\n灵活查询表中的数据。\n\n**参数：**\n- table_name: 表名\n- columns: 要查询的列，多个列用逗号分隔，默认为*\n- where: WHERE条件语句\n- order_by: 排序条件\n- limit: 返回结果数量限制，默认为100\n\n**返回：**\n- 表数据的JSON字符串\n\n## 使用示例\n```python\n# 获取所有表\ntables = get_all_tables()\n\n# 获取用户表的字段信息\ncolumns = get_table_columns(\"users\")\n\n# 执行自定义SQL查询\nresults = execute_raw_query(\"SELECT * FROM users WHERE age > 18\")\n\n# 获取表数据\ndata = get_table_data(\"orders\", columns=\"id,customer_name,total\", where=\"total > 100\", order_by=\"id DESC\")\n```\n\n## 注意事项\n1. 出于安全考虑，只支持执行SELECT查询\n2. 查询结果默认限制为100条记录\n3. 需要安装pymysql库"
}